// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	context "context"

	model "github.com/arslanovdi/logistic-package/pkg/model"
	mock "github.com/stretchr/testify/mock"
)

// Client is an autogenerated mock type for the Client type
type Client struct {
	mock.Mock
}

type Client_Expecter struct {
	mock *mock.Mock
}

func (_m *Client) EXPECT() *Client_Expecter {
	return &Client_Expecter{mock: &_m.Mock}
}

// Close provides a mock function with no fields
func (_m *Client) Close() {
	_m.Called()
}

// Client_Close_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Close'
type Client_Close_Call struct {
	*mock.Call
}

// Close is a helper method to define mock.On call
func (_e *Client_Expecter) Close() *Client_Close_Call {
	return &Client_Close_Call{Call: _e.mock.On("Close")}
}

func (_c *Client_Close_Call) Run(run func()) *Client_Close_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Client_Close_Call) Return() *Client_Close_Call {
	_c.Call.Return()
	return _c
}

func (_c *Client_Close_Call) RunAndReturn(run func()) *Client_Close_Call {
	_c.Run(run)
	return _c
}

// Create provides a mock function with given fields: ctx, pkg
func (_m *Client) Create(ctx context.Context, pkg *model.Package) (*uint64, error) {
	ret := _m.Called(ctx, pkg)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 *uint64
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.Package) (*uint64, error)); ok {
		return rf(ctx, pkg)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *model.Package) *uint64); ok {
		r0 = rf(ctx, pkg)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*uint64)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *model.Package) error); ok {
		r1 = rf(ctx, pkg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Client_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type Client_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx context.Context
//   - pkg *model.Package
func (_e *Client_Expecter) Create(ctx interface{}, pkg interface{}) *Client_Create_Call {
	return &Client_Create_Call{Call: _e.mock.On("Create", ctx, pkg)}
}

func (_c *Client_Create_Call) Run(run func(ctx context.Context, pkg *model.Package)) *Client_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*model.Package))
	})
	return _c
}

func (_c *Client_Create_Call) Return(_a0 *uint64, _a1 error) *Client_Create_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Client_Create_Call) RunAndReturn(run func(context.Context, *model.Package) (*uint64, error)) *Client_Create_Call {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function with given fields: ctx, id
func (_m *Client) Delete(ctx context.Context, id uint64) error {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uint64) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Client_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type Client_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - ctx context.Context
//   - id uint64
func (_e *Client_Expecter) Delete(ctx interface{}, id interface{}) *Client_Delete_Call {
	return &Client_Delete_Call{Call: _e.mock.On("Delete", ctx, id)}
}

func (_c *Client_Delete_Call) Run(run func(ctx context.Context, id uint64)) *Client_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uint64))
	})
	return _c
}

func (_c *Client_Delete_Call) Return(_a0 error) *Client_Delete_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Client_Delete_Call) RunAndReturn(run func(context.Context, uint64) error) *Client_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// Get provides a mock function with given fields: ctx, id
func (_m *Client) Get(ctx context.Context, id uint64) (*model.Package, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 *model.Package
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uint64) (*model.Package, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uint64) *model.Package); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Package)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uint64) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Client_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type Client_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - ctx context.Context
//   - id uint64
func (_e *Client_Expecter) Get(ctx interface{}, id interface{}) *Client_Get_Call {
	return &Client_Get_Call{Call: _e.mock.On("Get", ctx, id)}
}

func (_c *Client_Get_Call) Run(run func(ctx context.Context, id uint64)) *Client_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uint64))
	})
	return _c
}

func (_c *Client_Get_Call) Return(_a0 *model.Package, _a1 error) *Client_Get_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Client_Get_Call) RunAndReturn(run func(context.Context, uint64) (*model.Package, error)) *Client_Get_Call {
	_c.Call.Return(run)
	return _c
}

// List provides a mock function with given fields: ctx, offset, limit
func (_m *Client) List(ctx context.Context, offset uint64, limit uint64) ([]model.Package, error) {
	ret := _m.Called(ctx, offset, limit)

	if len(ret) == 0 {
		panic("no return value specified for List")
	}

	var r0 []model.Package
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uint64, uint64) ([]model.Package, error)); ok {
		return rf(ctx, offset, limit)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uint64, uint64) []model.Package); ok {
		r0 = rf(ctx, offset, limit)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.Package)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uint64, uint64) error); ok {
		r1 = rf(ctx, offset, limit)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Client_List_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'List'
type Client_List_Call struct {
	*mock.Call
}

// List is a helper method to define mock.On call
//   - ctx context.Context
//   - offset uint64
//   - limit uint64
func (_e *Client_Expecter) List(ctx interface{}, offset interface{}, limit interface{}) *Client_List_Call {
	return &Client_List_Call{Call: _e.mock.On("List", ctx, offset, limit)}
}

func (_c *Client_List_Call) Run(run func(ctx context.Context, offset uint64, limit uint64)) *Client_List_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uint64), args[2].(uint64))
	})
	return _c
}

func (_c *Client_List_Call) Return(_a0 []model.Package, _a1 error) *Client_List_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Client_List_Call) RunAndReturn(run func(context.Context, uint64, uint64) ([]model.Package, error)) *Client_List_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function with given fields: ctx, pkg
func (_m *Client) Update(ctx context.Context, pkg *model.Package) error {
	ret := _m.Called(ctx, pkg)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.Package) error); ok {
		r0 = rf(ctx, pkg)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Client_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type Client_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - ctx context.Context
//   - pkg *model.Package
func (_e *Client_Expecter) Update(ctx interface{}, pkg interface{}) *Client_Update_Call {
	return &Client_Update_Call{Call: _e.mock.On("Update", ctx, pkg)}
}

func (_c *Client_Update_Call) Run(run func(ctx context.Context, pkg *model.Package)) *Client_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*model.Package))
	})
	return _c
}

func (_c *Client_Update_Call) Return(_a0 error) *Client_Update_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Client_Update_Call) RunAndReturn(run func(context.Context, *model.Package) error) *Client_Update_Call {
	_c.Call.Return(run)
	return _c
}

// NewClient creates a new instance of Client. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *Client {
	mock := &Client{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
